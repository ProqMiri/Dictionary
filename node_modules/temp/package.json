{
  "_args": [
    [
      {
        "raw": "temp@github:adam-lynch/node-temp#remove_tmpdir_dep",
        "scope": null,
        "escapedName": "temp",
        "name": "temp",
        "rawSpec": "github:adam-lynch/node-temp#remove_tmpdir_dep",
        "spec": "github:adam-lynch/node-temp#remove_tmpdir_dep",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:adam-lynch/node-temp.git#remove_tmpdir_dep",
          "sshUrl": "git+ssh://git@github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
          "httpsUrl": "git+https://github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
          "gitUrl": "git://github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
          "shortcut": "github:adam-lynch/node-temp#remove_tmpdir_dep",
          "directUrl": "https://raw.githubusercontent.com/adam-lynch/node-temp/remove_tmpdir_dep/package.json"
        }
      },
      "C:\\Users\\a.mirnamiq\\Desktop\\nwjs-sdk-v0.23.1-win-x64\\node_modules\\nw-builder"
    ]
  ],
  "_from": "adam-lynch/node-temp#remove_tmpdir_dep",
  "_id": "temp@0.8.3",
  "_inCache": true,
  "_location": "/temp",
  "_phantomChildren": {},
  "_requested": {
    "raw": "temp@github:adam-lynch/node-temp#remove_tmpdir_dep",
    "scope": null,
    "escapedName": "temp",
    "name": "temp",
    "rawSpec": "github:adam-lynch/node-temp#remove_tmpdir_dep",
    "spec": "github:adam-lynch/node-temp#remove_tmpdir_dep",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:adam-lynch/node-temp.git#remove_tmpdir_dep",
      "sshUrl": "git+ssh://git@github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
      "httpsUrl": "git+https://github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
      "gitUrl": "git://github.com/adam-lynch/node-temp.git#remove_tmpdir_dep",
      "shortcut": "github:adam-lynch/node-temp#remove_tmpdir_dep",
      "directUrl": "https://raw.githubusercontent.com/adam-lynch/node-temp/remove_tmpdir_dep/package.json"
    }
  },
  "_requiredBy": [
    "/nw-builder"
  ],
  "_resolved": "git://github.com/adam-lynch/node-temp.git#279c1350cb7e4f02515d91da9e35d39a40774016",
  "_shasum": "631ac170d37a01f48ddcd0717d0ea6b8df4806c2",
  "_shrinkwrap": null,
  "_spec": "temp@github:adam-lynch/node-temp#remove_tmpdir_dep",
  "_where": "C:\\Users\\a.mirnamiq\\Desktop\\nwjs-sdk-v0.23.1-win-x64\\node_modules\\nw-builder",
  "author": {
    "name": "Bruce Williams",
    "email": "brwcodes@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/bruce/node-temp/issues"
  },
  "dependencies": {
    "rimraf": "~2.2.6"
  },
  "description": "Temporary files and directories",
  "devDependencies": {},
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node >=4.0.0"
  ],
  "gitHead": "279c1350cb7e4f02515d91da9e35d39a40774016",
  "homepage": "https://github.com/bruce/node-temp#readme",
  "keywords": [
    "temporary",
    "tmp",
    "temp",
    "tempdir",
    "tempfile",
    "tmpdir",
    "tmpfile"
  ],
  "license": "MIT",
  "main": "./lib/temp",
  "name": "temp",
  "optionalDependencies": {},
  "readme": "node-temp\r\n=========\r\n\r\nTemporary files, directories, and streams for Node.js.\r\n\r\nHandles generating a unique file/directory name under the appropriate\r\nsystem temporary directory, changing the file to an appropriate mode,\r\nand supports automatic removal (if asked)\r\n\r\n`temp` has a similar API to the `fs` module.\r\n\r\nNode.js Compatibility\r\n---------------------\r\n\r\nSupports v4.0.0+.\r\n\r\n[![Build Status](https://travis-ci.org/bruce/node-temp.png)](https://travis-ci.org/bruce/node-temp)\r\n\r\nPlease let me know if you have problems running it on a later version of Node.js or\r\nhave platform-specific problems.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall it using [npm](http://github.com/isaacs/npm):\r\n\r\n    $ npm install temp\r\n\r\nOr get it directly from:\r\nhttp://github.com/bruce/node-temp\r\n\r\nSynopsis\r\n--------\r\n\r\nYou can create temporary files with `open` and `openSync`, temporary\r\ndirectories with `mkdir` and `mkdirSync`, or you can get a unique name\r\nin the system temporary directory with `path`.\r\n\r\nWorking copies of the following examples can be found under the\r\n`examples` directory.\r\n\r\n### Temporary Files\r\n\r\nTo create a temporary file use `open` or `openSync`, passing\r\nthem an optional prefix, suffix, or both (see below for details on\r\naffixes). The object passed to the callback (or returned) has\r\n`path` and `fd` keys:\r\n\r\n```javascript\r\n{ path: \"/path/to/file\",\r\n, fd: theFileDescriptor\r\n}\r\n```\r\n\r\nIn this example we write to a temporary file and call out to `grep` and\r\n`wc -l` to determine the number of time `foo` occurs in the text.  The\r\ntemporary file is chmod'd `0600` and cleaned up automatically when the\r\nprocess at exit (because `temp.track()` is called):\r\n\r\n```javascript\r\nvar temp = require('temp'),\r\n    fs   = require('fs'),\r\n    util  = require('util'),\r\n    exec = require('child_process').exec;\r\n\r\n// Automatically track and cleanup files at exit\r\ntemp.track();\r\n\r\n// Fake data\r\nvar myData = \"foo\\nbar\\nfoo\\nbaz\";\r\n\r\n// Process the data (note: error handling omitted)\r\ntemp.open('myprefix', function(err, info) {\r\n  if (!err) {\r\n    fs.write(info.fd, myData);\r\n    fs.close(info.fd, function(err) {\r\n      exec(\"grep foo '\" + info.path + \"' | wc -l\", function(err, stdout) {\r\n        util.puts(stdout.trim());\r\n      });\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n### Want Cleanup? Make sure you ask for it.\r\n\r\nAs noted in the example above, if you want temp to track the files and\r\ndirectories it creates and handle removing those files and directories\r\non exit, you must call `track()`. The `track()` function is chainable,\r\nand it's recommended that you call it when requiring the module.\r\n\r\n```javascript\r\nvar temp = require(\"temp\").track();\r\n```\r\n\r\nWhy is this necessary? In pre-0.6 versions of temp, tracking was\r\nautomatic. While this works great for scripts and\r\n[Grunt tasks](http://gruntjs.com/), it's not so great for long-running\r\nserver processes. Since that's arguably what Node.js is _for_, you\r\nhave to opt-in to tracking.\r\n\r\nBut it's easy.\r\n\r\n#### Cleanup anytime\r\n\r\nWhen tracking, you can run `cleanup()` and `cleanupSync()` anytime\r\n(`cleanupSync()` will be run for you on process exit). An object will\r\nbe returned (or passed to the callback) with cleanup counts and\r\nthe file/directory tracking lists will be reset.\r\n\r\n```javascript\r\n> temp.cleanupSync();\r\n{ files: 1,\r\n  dirs:  0 }\r\n```\r\n\r\n```javascript\r\n> temp.cleanup(function(err, stats) {\r\n    console.log(stats);\r\n  });\r\n{ files: 1,\r\n  dirs:  0 }\r\n```\r\n\r\nNote: If you're not tracking, an error (\"not tracking\") will be passed\r\nto the callback.\r\n\r\n### Temporary Directories\r\n\r\nTo create a temporary directory, use `mkdir` or `mkdirSync`, passing\r\nit an optional prefix, suffix, or both (see below for details on affixes).\r\n\r\nIn this example we create a temporary directory, write to a file\r\nwithin it, call out to an external program to create a PDF, and read\r\nthe result.  While the external process creates a lot of additional\r\nfiles, the temporary directory is removed automatically at exit (because\r\n`temp.track()` is called):\r\n\r\n```javascript\r\nvar temp = require('temp'),\r\n    fs   = require('fs'),\r\n    util = require('util'),\r\n    path = require('path'),\r\n    exec = require('child_process').exec;\r\n\r\n// Automatically track and cleanup files at exit\r\ntemp.track();\r\n\r\n// For use with ConTeXt, http://wiki.contextgarden.net\r\nvar myData = \"\\\\starttext\\nHello World\\n\\\\stoptext\";\r\n\r\ntemp.mkdir('pdfcreator', function(err, dirPath) {\r\n  var inputPath = path.join(dirPath, 'input.tex')\r\n  fs.writeFile(inputPath, myData, function(err) {\r\n    if (err) throw err;\r\n    process.chdir(dirPath);\r\n    exec(\"texexec '\" + inputPath + \"'\", function(err) {\r\n      if (err) throw err;\r\n      fs.readFile(path.join(dirPath, 'input.pdf'), function(err, data) {\r\n        if (err) throw err;\r\n        sys.print(data);\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n### Temporary Streams\r\n\r\nTo create a temporary WriteStream, use 'createWriteStream', which sits\r\non top of `fs.createWriteStream`. The return value is a\r\n`fs.WriteStream` whose `path` is registered for removal when\r\n`temp.cleanup` is called (because `temp.track()` is called).\r\n\r\n```javascript\r\nvar temp = require('temp');\r\n\r\n// Automatically track and cleanup files at exit\r\ntemp.track();\r\n\r\nvar stream = temp.createWriteStream();\r\nstream.write(\"Some data\");\r\n// Maybe do some other things\r\nstream.end();\r\n```\r\n\r\n### Affixes\r\n\r\nYou can provide custom prefixes and suffixes when creating temporary\r\nfiles and directories. If you provide a string, it is used as the prefix\r\nfor the temporary name. If you provide an object with `prefix`,\r\n`suffix` and `dir` keys, they are used for the temporary name.\r\n\r\nHere are some examples:\r\n\r\n* `\"aprefix\"`: A simple prefix, prepended to the filename; this is\r\n  shorthand for:\r\n* `{prefix: \"aprefix\"}`: A simple prefix, prepended to the filename\r\n* `{suffix: \".asuffix\"}`: A suffix, appended to the filename\r\n  (especially useful when the file needs to be named with specific\r\n  extension for use with an external program).\r\n* `{prefix: \"myprefix\", suffix: \"mysuffix\"}`: Customize both affixes\r\n* `{dir: path.join(os.tmpdir(), \"myapp\")}`: default prefix and suffix\r\n  within a new temporary directory.\r\n* `null`: Use the defaults for files and directories (prefixes `\"f-\"`\r\n  and `\"d-\"`, respectively, no suffixes).\r\n\r\nIn this simple example we read a `pdf`, write it to a temporary file with\r\na `.pdf` extension, and close it.\r\n\r\n```javascript\r\nvar fs   = require('fs'),\r\n    temp = require('temp');\r\n\r\nfs.readFile('/path/to/source.pdf', function(err, data) {\r\n  temp.open({suffix: '.pdf'}, function(err, info) {\r\n    if (err) throw err;\r\n    fs.write(info.fd, contents);\r\n    fs.close(info.fd, function(err) {\r\n      if (err) throw err;\r\n      // Do something with the file\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n### Just a path, please\r\n\r\nIf you just want a unique name in your temporary directory, use\r\n`path`:\r\n\r\n```javascript\r\nvar fs = require('fs');\r\nvar tempName = temp.path({suffix: '.pdf'});\r\n// Do something with tempName\r\n```\r\n\r\nNote: The file isn't created for you, and the mode is not changed  -- and it\r\nwill not be removed automatically at exit.  If you use `path`, it's\r\nall up to you.\r\n\r\nUsing it with Grunt\r\n-------------------\r\n\r\nIf you want to use the module with [Grunt](http://gruntjs.com/), make sure you\r\nuse `async()` in your Gruntfile:\r\n\r\n```javascript\r\nmodule.exports = function (grunt) {\r\n  var temp = require(\"temp\");\r\n  temp.track(); // Cleanup files, please\r\n  grunt.registerTask(\"temptest\", \"Testing temp\", function() {\r\n\r\n    var done = this.async(); // Don't forget this!\r\n\r\n    grunt.log.writeln(\"About to write a file...\");\r\n    temp.open('tempfile', function(err, info) {\r\n      // File writing shenanigans here\r\n      grunt.log.writeln(\"Wrote a file!\")\r\n\r\n      done(); // REALLY don't forget this!\r\n\r\n    });\r\n  });\r\n};\r\n```\r\n\r\nFor more information, see the [Grunt FAQ](http://gruntjs.com/frequently-asked-questions#why-doesn-t-my-asynchronous-task-complete).\r\n\r\nTesting\r\n-------\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\nContributing\r\n------------\r\n\r\nYou can find the repository at:\r\nhttp://github.com/bruce/node-temp\r\n\r\nIssues/Feature Requests can be submitted at:\r\nhttp://github.com/bruce/node-temp/issues\r\n\r\nI'd really like to hear your feedback, and I'd love to receive your\r\npull-requests!\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright (c) 2010-2014 Bruce Williams. This software is licensed\r\nunder the MIT License, see LICENSE for details.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bruce/node-temp.git"
  },
  "scripts": {
    "test": "node test/temp-test.js"
  },
  "tags": [
    "temporary",
    "temp",
    "tempfile",
    "tempdir",
    "tmpfile",
    "tmpdir",
    "security"
  ],
  "version": "0.8.3"
}
